apply from: "${project.rootDir}/gradle/android/application.gradle"
apply plugin: "com.google.firebase.appdistribution" // {devops.distribution.firebase}
apply plugin: "com.google.firebase.firebase-perf" // {quality.performance.firebase}
apply plugin: "com.google.firebase.crashlytics" // {quality.crashes.firebase}
apply plugin: "com.google.gms.google-services" // {google-services}
apply plugin: "androidx.baselineprofile" // {quality.startup.baselineprofile}
apply plugin: "com.github.triplet.play" // {devops.distribution.google-play}
apply plugin: "io.objectbox" // {dataflow.storage.objectbox}

dependencies {
    implementation platform(libs.firebase.bom) // {firebase}
    implementation libs.firebase.analytics.ktx // {dataflow.analytics.firebase}
    implementation libs.firebase.crashlytics.ktx // {quality.crashes.firebase}
    implementation libs.firebase.config.ktx // {dataflow.config.firebase}
    implementation libs.firebase.perf // {quality.performance.firebase}
    implementation libs.androidx.startup // {startup-initializer}
    implementation libs.androidx.webkit // {userflow.webtonative}
    implementation libs.google.app.update // {userflow.update.google}
    implementation libs.google.app.review // {userflow.review.google}
    implementation libs.bundles.androidCoil // {ui.preview.coil}
    debugImplementation libs.chucker
    stagingImplementation libs.chucker
    testImplementation libs.chucker.release
    releaseImplementation libs.chucker.release
    implementation project(":core:ui")
    implementation project(":core:data")
    testImplementation project(":core:testing")
    baselineProfile project(':baselineprofile') // {quality.startup.baselineprofile}
}

android {
    namespace = "app"

    defaultConfig {
        applicationId = "kotli.app" // {applicationId}
        versionName = System.getProperty("versionNameExt") ?: "0.0.1"
        versionCode = (System.getProperty("versionCodeExt") ?: "1").toInteger()
        buildConfigField("long", "remoteConfigMinimumFetchIntervalInSeconds", "43200")
        buildConfigField("long", "remoteConfigInitTimeoutInSeconds", "5")
    }

    signingConfigs {
        register("staging") {
            storeFile = file("assemble/staging.keystore")
            keyAlias = "androiddebugkey"
            storePassword = "android"
            keyPassword = "android"
        }
        release {
            storeFile = file("assemble/release.keystore")
            keyAlias = "androidreleasekey"
            storePassword = "android"
            keyPassword = "android"
        }
    }

    buildTypes {
        named("debug") {
            signingConfig signingConfigs.getByName("staging")
            applicationIdSuffix = ".debug"

            debuggable true
            //{devops.distribution.firebase.debug}
            firebaseAppDistribution {
                artifactType = "APK"
                groups = "feature-developers"
                serviceCredentialsFile = "appDistributionCredentials.json"
            }
            // {devops.distribution.firebase.debug}
        }

        register("staging") {
            initWith(debug)
            matchingFallbacks.add("debug")

            signingConfig signingConfigs.getByName("staging")
            applicationIdSuffix = ".staging"

            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            // {devops.distribution.firebase.staging}
            firebaseAppDistribution {
                artifactType = "APK"
                groups = "feature-testers"
                serviceCredentialsFile = "appDistributionCredentials.json"
            }
            // {devops.distribution.firebase.staging}
        }

        named("release") {
            signingConfig signingConfigs.getByName("release")
            applicationIdSuffix = ""

            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
}

// {quality.startup.baselineprofile.config}
baselineProfile {
    automaticGenerationDuringBuild true
    saveInSrc true
}
// {quality.startup.baselineprofile.config}

// {devops.distribution.google-play.config}
play {
    serviceAccountCredentials.set(file("assemble/google-play-publisher.json"))
    releaseStatus.set(com.github.triplet.gradle.androidpublisher.ReleaseStatus.DRAFT)
    track.set("internal")
}
// {devops.distribution.google-play.config}